/*
 * This file is generated by jOOQ.
*/
package com.nextcont.drive.jooq.db.ecm_trans.tables;


import com.nextcont.drive.jooq.db.ecm_trans.EcmTrans;
import com.nextcont.drive.jooq.db.ecm_trans.Keys;
import com.nextcont.drive.jooq.db.ecm_trans.tables.records.FastdfsFilerecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FastdfsFilerecord extends TableImpl<FastdfsFilerecordRecord> {

    private static final long serialVersionUID = 707177532;

    /**
     * The reference instance of <code>ecm_trans.fastdfs_fileRecord</code>
     */
    public static final FastdfsFilerecord FASTDFS_FILERECORD = new FastdfsFilerecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FastdfsFilerecordRecord> getRecordType() {
        return FastdfsFilerecordRecord.class;
    }

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.globalId</code>.
     */
    public final TableField<FastdfsFilerecordRecord, String> GLOBALID = createField("globalId", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.fid</code>.
     */
    public final TableField<FastdfsFilerecordRecord, String> FID = createField("fid", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.groupName</code>.
     */
    public final TableField<FastdfsFilerecordRecord, String> GROUPNAME = createField("groupName", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.fileName</code>.
     */
    public final TableField<FastdfsFilerecordRecord, String> FILENAME = createField("fileName", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.extensionsName</code>.
     */
    public final TableField<FastdfsFilerecordRecord, String> EXTENSIONSNAME = createField("extensionsName", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.createTime</code>.
     */
    public final TableField<FastdfsFilerecordRecord, Timestamp> CREATETIME = createField("createTime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.updateTime</code>.
     */
    public final TableField<FastdfsFilerecordRecord, Timestamp> UPDATETIME = createField("updateTime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.httpEncoding</code>.
     */
    public final TableField<FastdfsFilerecordRecord, String> HTTPENCODING = createField("httpEncoding", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.fsRawValue</code>.
     */
    public final TableField<FastdfsFilerecordRecord, String> FSRAWVALUE = createField("fsRawValue", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.path</code>.
     */
    public final TableField<FastdfsFilerecordRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "");

    /**
     * The column <code>ecm_trans.fastdfs_fileRecord.mimeType</code>.
     */
    public final TableField<FastdfsFilerecordRecord, String> MIMETYPE = createField("mimeType", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>ecm_trans.fastdfs_fileRecord</code> table reference
     */
    public FastdfsFilerecord() {
        this("fastdfs_fileRecord", null);
    }

    /**
     * Create an aliased <code>ecm_trans.fastdfs_fileRecord</code> table reference
     */
    public FastdfsFilerecord(String alias) {
        this(alias, FASTDFS_FILERECORD);
    }

    private FastdfsFilerecord(String alias, Table<FastdfsFilerecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private FastdfsFilerecord(String alias, Table<FastdfsFilerecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return EcmTrans.ECM_TRANS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FastdfsFilerecordRecord> getPrimaryKey() {
        return Keys.KEY_FASTDFS_FILERECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FastdfsFilerecordRecord>> getKeys() {
        return Arrays.<UniqueKey<FastdfsFilerecordRecord>>asList(Keys.KEY_FASTDFS_FILERECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FastdfsFilerecord as(String alias) {
        return new FastdfsFilerecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FastdfsFilerecord rename(String name) {
        return new FastdfsFilerecord(name, null);
    }
}
